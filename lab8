

def fib(n , mem = {}):
    if n in mem:
        return mem[n]
    if n<= 1:
        return n
    mem[n] = fib(n-1, mem) + fib(n-2, mem)

    return mem[n]



def fib_iter(n):
    fib_list = [0] * n
    fib_list[0:2] = [0,1]
    for i in range(2,n):
        fib_list[i] = fib_list[i-1] + fib_list[i-2]

    return fib_list[n-1]



def compute_cost(i, cost, houses):

    
    cost[0][0] = houses[0][0]
    cost[1][0] = houses[1][0]
    cost[2][0] = houses[2][0]

    for i in range(1, N):
        cost[0][i] = houses[0][1] + min(cost[1][i-1], cost[2][i-1])
        cost[1][i] = houses[1][i] + min(cost[0][i-1], cost[2][i-1])
        cost[2][i] = houses[2][i] + min(cost[0][i-1], cost[1][i-1])

    return min(cost[0][5], cost[1][5], cost[2][5])

    # let 0 be red 


## PART A

## OPT(n)=min(OPT(n-1)+1,OPT(n-4)+1,OPT(n-5)+1)


def charliefunction(list, target):


    OPT = [float('inf')] * (target +1)

    OPT[0] = 0

    for n in range(target+1):
        for element in list:
            if n - element >= 0:

                OPT[n] = min(OPT[n], OPT[n-element]+1)

    return OPT


def function_2(target, values, memo={}):
    if target < 0:
        return float('inf'), []
    if target == 0:
        return 0, []
    if target in memo:
        return memo[target]
    
    best_count = float('inf')
    OPT = []
    
    for value in values:
        sub_count, sub_combo = function_2(target - value, values, memo)
        sub_count += 1  # ..since we used one more coin
        
        if sub_count < best_count:
            best_count = sub_count
            OPT = [value] + sub_combo

    memo[target] = (best_count, OPT)
    return memo[target]



def can_be_segmented(s: str, word_dict: list):
    if s in word_dict:
        return True
        
    for word in word_dict:
        if s.startswith(word):
            break
    else:  # word can't be further broken up, so can't be segmented
        return False
        
    for word in word_dict:
        if s.startswith(word):
            if can_be_segmented(s[len(word):], word_dict):
                return True

    return False











if __name__ == '__main__':
    print(fib(3))
    print(fib_iter(3))

    houses = [[7, 6, 7, 8, 9, 20],
          [3, 8, 9, 22, 12, 8],
          [16, 10, 4, 2, 5, 7]]

    N = 6

    cost = [[0] * N,
            [0] * N,
            [0] * N]


    print(compute_cost(6, cost, houses))

    denominations = [1, 4, 5]  
    
    target = 10  

    OPT_list = [] * target
    OPT_list = charliefunction(denominations, target)
    print(OPT_list)  


    denominations = [1, 4, 5]
    target = 8
    result = function_2(target, denominations)
    print(result)

    s = "pineapplepenapple"
    word_dict = ["apple", "pen", "pine", "pineapple"]

    result = can_be_segmented(s, word_dict)
    print(result)  # Expected: True

